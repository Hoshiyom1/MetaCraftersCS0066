// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ExceptionHandlingDemo {
    address public owner;
    uint256 public value;
    mapping(address => uint256) public balances;

    constructor() {
        owner = msg.sender;
    }

    function deposit(uint256 amount) public {
        require(msg.sender != owner, "Owner cannot deposit");
        value += amount;
        balances[msg.sender] += amount;
    }

    function withdraw(uint256 amount) public {
        require(msg.sender != owner, "Owner cannot withdraw");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        value -= amount;
    }

    function assertExample(uint256 x) public pure returns (uint256) {
        assert(x != 0);
        return x;
    }

    function requireExample(uint256 x) public pure returns (uint256) {
        require(x != 0, "Input must be non-zero");
        return x;
    }

    function revertExample(uint256 x) public pure returns (uint256) {
        if (x == 0) {
            revert("Input cannot be zero");
        }
        return x;
    }
}
